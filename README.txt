pk
=========

A simple command line tool to store your passwords and retrieve them securely

The tool uses postgres (later implementation will use embedded sqlite)

Available Commands
===================

- pk init    initialize app
- pk login   generate token
- pk add     add new password
- pk delete  delete a password entry
- pk list    retrieve all passwords
- pk get     get a single account details
- pk update  update a certain entry



Implementation Details
========================

pk uses bcrypt to hash the master password, which is never known to application
or stored as plain text.
The user should at all times remember the master password

For user to perform any command after (apart from pk init and pk login) he/she
needs a JWT token that can be generated by running (pk login) command. A user have
to provide the authorization token hence forth

The token is very short lived bout 10 minutes (I think of making it 5 minutes)


pk uses RSA to encode and sign the plaintext (password) before storing them,
it also create message sum using RSA. Upon retrieving the signature is
recreated using after using a decoded plaintext from stored ciphertext, then
comparison of the signature and bcrypt hash are made. If they all pass the details
are returned if not pk assumes that the db is compromised and your data are not
what you stored (they have been changed)

Plan
=====
To use sqlite or any other embedded database
To add other ciphers especially ECC
To install certificates to System Certs Pool

Why pk?
========
I just made the tool as a playground to be able to experiment with databases,
authentication and authorization, cryptography, linux env, command line tools,
runtime complication etc etc etc

If you are getting started with golang this may be a good place to experiment



Disclaimer
===========
Use at your own risk. The developer has no control or responsibilities for any
results good/bad when this tool is used by anyone for any purpose.